[{"title":"自定义UIDatePicker,只显示年月和至今","url":"http://blog.witchan.com/2017/08/13/ITDatePickerController/","content":"<h1 id=\"ITDatePickerController\"><a href=\"#ITDatePickerController\" class=\"headerlink\" title=\"ITDatePickerController\"></a>ITDatePickerController</h1><hr>\n<p>仿UIDatePicker, 只显示年和月，可以设置最大日期，最小日期和默认日期，可以显示”至今”,伪循环滚动</p>\n<h1 id=\"Sample-code\"><a href=\"#Sample-code\" class=\"headerlink\" title=\"Sample code\"></a>Sample code</h1><hr>\n<pre><code>ITDatePickerController *datePickerController = [[ITDatePickerController alloc] init];\ndatePickerController.tag = 100;                     // Tag, which may be used in delegate methods\ndatePickerController.delegate = self;               // Set the callback object\ndatePickerController.showToday = NO;                // Whether to show &quot;today&quot;, default is yes\ndatePickerController.defaultDate = self.startDate;  // Default date\ndatePickerController.maximumDate = self.endDate;    // maxinum date\n\n[self presentViewController:datePickerController animated:YES completion:nil];\n</code></pre><p><img src=\"https://raw.githubusercontent.com/witchan/Picture/master/ITDatePickerController.gif\" alt=\"MacDown Screenshot\"></p>\n<p><a href=\"https://github.com/witchan/ITDatePickerController\" target=\"_blank\" rel=\"external\">源码地址</a></p>\n<p><strong> In the end !</strong></p>\n","categories":[],"tags":[]},{"title":"Mac下对ShadowsocksX进行Hook,实现自动更新账号","url":"http://blog.witchan.com/2017/03/17/Hook-shadowsocketsx-in-mac/","content":"<p>使用ShadowsocksX的人群有两种，第一种自己购买的账号，第二种就是在网上找临时的账号，但临时账号，过几小时，密码都会改变，又得重新找开网站，重新设置。今天就针对这种情况对ShadowsocksX进行Hook，达到启动APP后，自动更新账号密码的目的。<br>编写工具为<a href=\"https://github.com/poboke/EasySIMBL-Bundle-Template\" target=\"_blank\" rel=\"external\">EasySIMBL</a><br>一. <strong>识别二维码</strong></p>\n<p>二. <strong>解码字符串</strong></p>\n<p>三. <strong>保存账号信息</strong></p>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"一-识别二维码\"><a href=\"#一-识别二维码\" class=\"headerlink\" title=\"一. 识别二维码\"></a>一. 识别二维码</h1><p>class_dump导出头文件后，你会发现里面有Zxing二维码扫描框架，那我们就直接使用Zxing来进行二维码识别，代码如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (NSString *)scanQRCodeWithImage:(NSImage *)image &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (image == nil) &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> nil;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    CGImageRef imageToDecode = [VPNHelper nsImageToCGImageRef:image];</div><div class=\"line\">    ZXLuminanceSource *<span class=\"built_in\">source</span> = [[objc_getClass(<span class=\"string\">\"ZXCGImageLuminanceSource\"</span>) alloc] initWithCGImage:imageToDecode];</div><div class=\"line\">    ZXBinaryBitmap *bitmap = [objc_getClass(<span class=\"string\">\"ZXBinaryBitmap\"</span>) binaryBitmapWithBinarizer:[objc_getClass(<span class=\"string\">\"ZXHybridBinarizer\"</span>) binarizerWithSource:<span class=\"built_in\">source</span>]];</div><div class=\"line\">    </div><div class=\"line\">    ZXDecodeHints *hints = [objc_getClass(<span class=\"string\">\"ZXDecodeHints\"</span>) hints];</div><div class=\"line\">    </div><div class=\"line\">    ZXMultiFormatReader *reader = [objc_getClass(<span class=\"string\">\"ZXMultiFormatReader\"</span>) reader];</div><div class=\"line\">    ZXResult *result = [reader decode:bitmap</div><div class=\"line\">                                hints:hints</div><div class=\"line\">                                error:nil];</div><div class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> result.text;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> nil;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>扫描得到的信息为’ss://cmM0LW1kNToyMDQ2NzIzMkAxMzguNjguNjEuNDI6MjM0NTY=’</p>\n<h1 id=\"二-解码字符串\"><a href=\"#二-解码字符串\" class=\"headerlink\" title=\"二. 解码字符串\"></a>二. 解码字符串</h1><p>由于ShadowsocksX可以生成二维码，那就去查找在哪生成的二维码。在所有.h文件中，搜索qrcode后，在SWBAppDelegate.h文件中找到                     showQRCode方法，代码如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">void -[SWBAppDelegate showQRCode](void * self, void * _cmd) &#123;</div><div class=\"line\">    r12 = self;</div><div class=\"line\">    rax = [ShadowsocksRunner generateSSURL]; // 生成二维码URL</div><div class=\"line\">    rax = [rax retain];</div><div class=\"line\">    <span class=\"keyword\">if</span> (rax != 0x0) &#123;</div><div class=\"line\">            var_30 = rax;</div><div class=\"line\">            rax = [SWBQRCodeWindowController alloc];</div><div class=\"line\">            rax = [rax initWithWindowNibName:@<span class=\"string\">\"QRCodeWindow\"</span>];</div><div class=\"line\">            rdi = r12-&gt;qrCodeWindowController;</div><div class=\"line\">            r12-&gt;qrCodeWindowController = rax;</div><div class=\"line\">            [rdi release];</div><div class=\"line\">            var_38 = r12-&gt;qrCodeWindowController;</div><div class=\"line\">            rbx = [[var_30 absoluteString] retain];</div><div class=\"line\">            [var_38 <span class=\"built_in\">set</span>QrCode:rbx];</div><div class=\"line\">            [rbx release];</div><div class=\"line\">            [r12-&gt;qrCodeWindowController showWindow:r12];</div><div class=\"line\">            [*_NSApp activateIgnoringOtherApps:0x1];</div><div class=\"line\">            rbx = [[r12-&gt;qrCodeWindowController window] retain];</div><div class=\"line\">            [rbx makeKeyAndOrderFront:0x0];</div><div class=\"line\">            [rbx release];</div><div class=\"line\">            rax = var_30;</div><div class=\"line\">    &#125;</div><div class=\"line\">    [rax release];</div><div class=\"line\">    <span class=\"built_in\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 不难发现，[ShadowsocksRunner generateSSURL]生成二维码字符串，那我们继续</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">void * +[ShadowsocksRunner generateSSURL](void * self, void * _cmd) &#123;</div><div class=\"line\">    rax = [ShadowsocksRunner isUsingPublicServer];</div><div class=\"line\">    rbx = 0x0;</div><div class=\"line\">    <span class=\"keyword\">if</span> (rax == 0x0) &#123;</div><div class=\"line\">            r15 = [[ShadowsocksRunner configForKey:@<span class=\"string\">\"proxy encryption\"</span>] retain];</div><div class=\"line\">            var_38 = r15;</div><div class=\"line\">            r13 = [[ShadowsocksRunner configForKey:@<span class=\"string\">\"proxy password\"</span>] retain];</div><div class=\"line\">            rbx = [[ShadowsocksRunner configForKey:@<span class=\"string\">\"proxy ip\"</span>] retain];</div><div class=\"line\">            rax = [ShadowsocksRunner configForKey:@<span class=\"string\">\"proxy port\"</span>];</div><div class=\"line\">            rax = [rax retain];</div><div class=\"line\">            var_40 = rax;</div><div class=\"line\">            stack[2048] = rax;</div><div class=\"line\">            rcx = r15;</div><div class=\"line\">            r12 = r13;</div><div class=\"line\">            r15 = rbx;</div><div class=\"line\">            rbx = [[NSString stringWithFormat:@<span class=\"string\">\"%@:%@@%@:%@\"</span>, rcx, r12, r15, stack[2048]] retain];</div><div class=\"line\">            var_30 = rbx;</div><div class=\"line\">            [var_40 release];</div><div class=\"line\">            [r15 release];</div><div class=\"line\">            [r12 release];</div><div class=\"line\">            [var_38 release];</div><div class=\"line\">            rdi = rbx;</div><div class=\"line\">            r14 = [[rdi dataUsingEncoding:0x4] retain];</div><div class=\"line\">            r15 = [[r14 base64Encoding] retain];</div><div class=\"line\">            [r14 release];</div><div class=\"line\">            r12 = [[NSString stringWithFormat:@<span class=\"string\">\"ss://%@\"</span>, r15] retain];</div><div class=\"line\">            rbx = [[NSURL URLWithString:r12] retain];</div><div class=\"line\">            [r12 release];</div><div class=\"line\">            [r15 release];</div><div class=\"line\">            [var_30 release];</div><div class=\"line\">    &#125;</div><div class=\"line\">    rdi = rbx;</div><div class=\"line\">    rax = [rdi autorelease];</div><div class=\"line\">    <span class=\"built_in\">return</span> rax;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从代码中可以看出，该方法对账号的地址，端口，密码，加密方式进行拼接，然后Base64编码。</p>\n<h1 id=\"三-保存账号信息\"><a href=\"#三-保存账号信息\" class=\"headerlink\" title=\"三. 保存账号信息\"></a>三. 保存账号信息</h1><p>既然有了账号信息，剩下的就是将该信息存储，我们知道ShadowsocksX有个服务器设定页面，不难想象，该类里肯定有对账号进行增删改查的功能，用Interface Inspector(Mac下的UI查看工具，相当于iOS的Reveal)工具可知服务器设定页面属于SWBConfigWindowController类，在该类中，我们发现了-(void)OK:(id)arg1;，该方法是在我们修改信息后，点击确定所执行的方法，那我们支看看这里都做了什么。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">void -[SWBConfigWindowController OK:](void * self, void * _cmd, void * arg2) &#123;</div><div class=\"line\">    rbx = self;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([self saveCurrentProfile] != 0x0) &#123;</div><div class=\"line\">            [rbx saveSettings];</div><div class=\"line\">            r14 = [[rbx window] retain];</div><div class=\"line\">            [r14 performClose:rbx];</div><div class=\"line\">            rdi = r14;</div><div class=\"line\">            [rdi release];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            rdi = rbx;</div><div class=\"line\">            [rdi shakeWindow];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该方法简单来说调用了两个重要方法saveCurrentProfile和saveSettings，saveCurrentProfile方法只是把当前修改的账号信息保存，这方法我们忽略，重点来看看saveSettings方法。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">oid -[SWBConfigWindowController saveSettings](void * self, void * _cmd) &#123;</div><div class=\"line\">    rdx = self-&gt;configuration;</div><div class=\"line\">    [ProfileManager saveConfiguration:rdx];</div><div class=\"line\">    [ShadowsocksRunner reloadConfig];</div><div class=\"line\">    rbx = [[self delegate] retain];</div><div class=\"line\">    [rbx configurationDidChange];</div><div class=\"line\">    rdi = rbx;</div><div class=\"line\">    [rdi release];</div><div class=\"line\">    <span class=\"built_in\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由代码可知，保存账号信息调用了[ProfileManager saveConfiguration:rdx];和[ShadowsocksRunner reloadConfig];那我们只要手动的调用这两方法就可以了。我的实现代码如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Profile *profile = [self initProfileWithURL:url]; // 账号的Model</div><div class=\"line\">Configuration *configuration = [objc_getClass(<span class=\"string\">\"ProfileManager\"</span>) performSelector:@selector(configuration)];</div><div class=\"line\">configuration.profiles = [@[profile] mutableCopy];</div><div class=\"line\">configuration.current = 0;</div><div class=\"line\">[objc_getClass(<span class=\"string\">\"ProfileManager\"</span>) saveConfiguration:configuration];</div><div class=\"line\">[objc_getClass(<span class=\"string\">\"ShadowsocksRunner\"</span>) reloadConfig];</div></pre></td></tr></table></figure>\n<p>由于该方法是异步，所以最后我们再调用下面方法刷新服务器列表</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SWBAppDelegate *appDelegate = [NSApplication sharedApplication].delegate;</div><div class=\"line\">[appDelegate valueForKey:@<span class=\"string\">\"updateServersMenu\"</span>];</div></pre></td></tr></table></figure>\n<p><strong> In the end !</strong></p>\n<p><strong>原创文章如需转载，请注明出处。</strong></p>\n","categories":[],"tags":[]},{"title":"Hexo + Coding 搭建个人博客","url":"http://blog.witchan.com/2015/12/12/Hexo+BCoding-build-a-personal-blog/","content":"<p>最简单的教程教你使用<strong>hexo</strong>在<strong>coding</strong>上搭建个人博客</p>\n<p>一. <strong>安装Node.js</strong><a href=\"http://www.apple.com/cn/shop/browse/finance/installment\" target=\"_blank\" rel=\"external\">http://www.apple.com/cn/shop/browse/finance/installment</a><br>二. <strong>安装hexo</strong><br>三. <strong>生成本地博客</strong><br>四. <strong>配置<a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">coding.net</a></strong><br>五. <strong>域名解析</strong></p>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"一-安装Node-js\"><a href=\"#一-安装Node-js\" class=\"headerlink\" title=\"一. 安装Node.js\"></a>一. 安装Node.js</h1><p>因为hexo基于Node.js，所以在这要先安装Node.js。下载地址:<a href=\"https://nodejs.org/dist/v6.4.0/node-v6.4.0.pkg\" target=\"_blank\" rel=\"external\">https://nodejs.org/dist/v6.4.0/node-v6.4.0.pkg</a></p>\n<h1 id=\"二-安装hexo\"><a href=\"#二-安装hexo\" class=\"headerlink\" title=\"二. 安装hexo\"></a>二. 安装hexo</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">终端输入:</div><div class=\"line\">$ sudo npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<h1 id=\"三-生成本地博客\"><a href=\"#三-生成本地博客\" class=\"headerlink\" title=\"三. 生成本地博客\"></a>三. 生成本地博客</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">终端输入:</div><div class=\"line\">$ <span class=\"built_in\">cd</span> Documents/myblog/\t\t\t\t  \t// 博客存放的路径</div><div class=\"line\">$ hexo init                             // 创建博客</div><div class=\"line\">$ npm install\t\t\t \t\t        // 安装依赖包</div><div class=\"line\">$ npm install hexo-deployer-git --save\t// 安装git插件</div><div class=\"line\">$ hexo g\t\t \t\t\t\t \t    // 生成静态网站</div><div class=\"line\">$ hexo s      \t\t\t\t\t\t    // 启动本地预览</div></pre></td></tr></table></figure>\n<p>在浏览器输入<a href=\"http://0.0.0.0:4000/\" target=\"_blank\" rel=\"external\">http://0.0.0.0:4000/</a>即可访问本地博客.如果要执行其他命令时,请先按<code>Ctrl+C</code> 结束本地访问博客. </p>\n<h1 id=\"四-配置coding-net\"><a href=\"#四-配置coding-net\" class=\"headerlink\" title=\"四. 配置coding.net\"></a>四. 配置coding.net</h1><ol>\n<li><a href=\"https://coding.net/register\" target=\"_blank\" rel=\"external\">注册coding.net</a>并创建项目,项目名称和用户名保持一致.  </li>\n<li>打开与用户名同名的项目 -&gt; pages 服务 -&gt; 部署分支输入: <code>master</code> 并开启.  </li>\n<li><p>打开myblog文件夹下的_config.yml文件,并在最后一行添加以下代码并保存:  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">\t<span class=\"built_in\">type</span>:git</div><div class=\"line\">\trepository:git@coding.net:用户名/用户名.git</div><div class=\"line\">\tbranch:master</div></pre></td></tr></table></figure>\n</li>\n<li><p>上传网页到coding</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">终端输入:</div><div class=\"line\">$ <span class=\"built_in\">cd</span> Documents/myblog/</div><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在浏览器输入<a href=\"http://用户名.coding.me/用户名\" target=\"_blank\" rel=\"external\">http://用户名.coding.me/用户名</a> 回车,就能看到一个hello 的页面了,至此,你的博客已经建立成功,如果你有自己的域名,那请看第五步 ↓↓↓</p>\n<h1 id=\"五-域名解析\"><a href=\"#五-域名解析\" class=\"headerlink\" title=\"五. 域名解析\"></a>五. 域名解析</h1><ol>\n<li>域名管理网站 -&gt; 域名管理 -&gt; 解析 -&gt; 添加三条解析</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">记录类型</th>\n<th style=\"text-align:left\">主机记录</th>\n<th style=\"text-align:left\">线路解析</th>\n<th style=\"text-align:left\">记录值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CNAME</td>\n<td style=\"text-align:left\">blog</td>\n<td style=\"text-align:left\">默认</td>\n<td style=\"text-align:left\">用户名.coding.me</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CNAME</td>\n<td style=\"text-align:left\">www</td>\n<td style=\"text-align:left\">默认</td>\n<td style=\"text-align:left\">用户名.coding.me</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CNAME</td>\n<td style=\"text-align:left\">@</td>\n<td style=\"text-align:left\">默认</td>\n<td style=\"text-align:left\">用户名.coding.me</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>登录coding.net -&gt; 我的项目 -&gt; 打开与用户名同名的项目 -&gt; 项目设置 -&gt; pages 服务 -&gt; 添加自定义域名</li>\n</ol>\n<ul>\n<li>www.域名.com</li>\n<li>blog.域名.com</li>\n<li>域名.com</li>\n</ul>\n<p>至此,一个完整的博客就此诞生了,如你在创建过程中遇到什么问题的话,欢迎留言.</p>\n<p><strong> In the end !</strong></p>\n<p><strong>原创文章如需转载，请注明出处。</strong></p>\n","categories":[],"tags":[]},{"title":"about","url":"http://blog.witchan.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://blog.witchan.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://blog.witchan.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://blog.witchan.com/search/index.html","content":"","categories":[],"tags":[]}]